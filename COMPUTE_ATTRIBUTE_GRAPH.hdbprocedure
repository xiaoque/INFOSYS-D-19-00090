PROCEDURE "SAP_HANA_IM_ESS"."sap.hana.im.ess.deploy.schemaComplement::COMPUTE_ATTRIBUTE_GRAPH" (
	IN HIER_TABLE VARCHAR(512);
  ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
	AS
BEGIN

--- Construct a attribute graph for hierarchy
--- if attribute nodes are empty, then adds all dim id attributes

DECLARE dynamicSql  VARCHAR(512);
DECLARE BOTTOM_ATTR_NAME VARCHAR(200);
DECLARE HIER_VALIDE INTEGER;
DECLARE HIER_NODES INTEGER;


SELECT COUNT(DISTINCT NAME) INTO HIER_NODES
FROM "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_NODES"
WHERE HIERARCHY_ID = :HIERARCHY_ID
; 

IF (:HIER_NODES > 0) THEN
	
	--- Insert data from hierarchy table into HIERARCHY_TO_CRAWL
	 dynamicSql :=  'INSERT INTO "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::HIERARCHY_TO_CRAWL" 
	            	(HIERARCHY_ID,RESULT_NODE,PRED_NODE,LEVEL_NAME,IS_LEAF,LEVEL_NUM)
	            	SELECT '''||:HIERARCHY_ID||''' AS HIERARCHY_ID,RESULT_NODE, PRED_NODE, LEVEL_NAME, IS_LEAF, LEVEL FROM ' ||
	                :HIER_TABLE ||' WHERE LEVEL <> ''0'''; 
	EXEC(:dynamicSql);
	
	--- Clear previous edges of attribute graph if exists 
	DELETE FROM 
		"SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_EDGES"
	WHERE HIERARCHY_ID = :HIERARCHY_ID
	;
	
	--- Update hierarchy information with bottom attribute
	-- CALL "SAP_HANA_IM_ESS"."sap.hana.im.ess.deploy.schemaComplement::DEPLOY_HIER_BOTTOM_ATT"(:HIERARCHY_ID);
	
	SELECT TOP 1 NAME INTO BOTTOM_ATTR_NAME
	FROM "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_NODES"
	WHERE HIERARCHY_ID = :HIERARCHY_ID
	ORDER BY LEVEL_NUM DESC
	;
	
	UPDATE "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::HIERARCHY_INSTANCE" INS
		SET BOTTOM_ATT_ID = NODE.ATT_ID
		FROM "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::HIERARCHY_INSTANCE" INS, 
			"SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_NODES" NODE
		WHERE INS.HIERARCHY_ID = :HIERARCHY_ID
			AND NODE.NAME = :BOTTOM_ATTR_NAME
			AND NODE.HIERARCHY_ID = :HIERARCHY_ID
	;
	
	SELECT COUNT(*) INTO HIER_VALIDE 
	FROM "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::HIERARCHY_TO_CRAWL"
	WHERE HIERARCHY_ID = :HIERARCHY_ID
	;
	
	IF(:HIER_VALIDE > 1) THEN
	 
		--- Add inital edges to table
		--  all edges are assumed as label f
		INSERT INTO "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_EDGES"
			(HIERARCHY_ID, ATT_NAME, PARENT_ATT_NAME)
			SELECT :HIERARCHY_ID, EDGES.ATT_NAME, EDGES.PARENT_ATT_NAME
			FROM
			(
				SELECT DISTINCT 
					A.LEVEL_NAME AS ATT_NAME,
					B.LEVEL_NAME AS PARENT_ATT_NAME
				FROM "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::HIERARCHY_TO_CRAWL" A
				INNER JOIN 
					"SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::HIERARCHY_TO_CRAWL" B
					ON A.PRED_NODE = B.RESULT_NODE
					AND A.HIERARCHY_ID = B.HIERARCHY_ID
				WHERE A.HIERARCHY_ID = :HIERARCHY_ID
			) EDGES
		;
		
		--- Find addtional edges from bottom level
		TERMINAL_NODE = 
			SELECT DISTINCT LEVEL_NAME
			FROM "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::HIERARCHY_TO_CRAWL"
			WHERE HIERARCHY_ID = :HIERARCHY_ID
				AND IS_LEAF = 1
				AND LEVEL_NAME <> :BOTTOM_ATTR_NAME
		;
		
		
		--- Mark attributes
		UPDATE "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_NODES"
			SET IS_TERMINAL = 1
			WHERE NAME IN 
			(
				SELECT LEVEL_NAME 
				FROM :TERMINAL_NODE
			)
		;
		
		--- Set optional nodes (all level nodes below the terminal nodes)
		UPDATE "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_NODES"
			SET IS_OPTION = 1
			WHERE LEVEL_NUM > 
				(
					SELECT MAX(NODES.LEVEL_NUM)
					FROM "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_NODES" NODES
					INNER JOIN :TERMINAL_NODE NAME
						ON NAME.LEVEL_NAME = NODES.NAME
					WHERE NODES.HIERARCHY_ID = :HIERARCHY_ID
				)
			AND HIERARCHY_ID = :HIERARCHY_ID
		;
		
		--- Compute new edges in attribute graph
		
		NEW_MAPPINGS = 
			SELECT DISTINCT		
				A.ATT_NAME,
				SUBSTRING(A.RESULT_NODE, LOCATE(A.RESULT_NODE,'.',-1)+1) AS RESULT_NODE, 
				B.LEVEL_NAME AS PARENT_ATT_NAME,
				SUBSTRING(B.RESULT_NODE, LOCATE(B.RESULT_NODE,'.',-1)+1) AS PRED_NODE 
			FROM
			(
				SELECT RESULT_NODE, LEVEL_NAME AS ATT_NAME, LEFT(PRED_NODE, LOCATE_REGEXPR(START '(\.\[\])*$' IN PRED_NODE)-1) AS PRED_NODE
				FROM "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::HIERARCHY_TO_CRAWL"
				WHERE PRED_NODE LIKE '%[]'
					AND RESULT_NODE NOT LIKE '%[]'
					AND HIERARCHY_ID = :HIERARCHY_ID
			) A 
			INNER JOIN
				"SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::HIERARCHY_TO_CRAWL" B
				ON A.PRED_NODE = B.RESULT_NODE
			WHERE B.HIERARCHY_ID = :HIERARCHY_ID
		;
		
		NEW_EDGES =
			SELECT DISTINCT
				ATT_NAME,
				PARENT_ATT_NAME
			FROM :NEW_MAPPINGS
		;
		
		
		--- Update optional nodes
		UPDATE "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_NODES" NODES
			SET NODES.IS_OPTION = 1
			FROM "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_NODES" NODES
			WHERE NODES.NAME IN
			(
				SELECT DISTINCT NAME 
				FROM
				(
					SELECT DISTINCT EDGES.PARENT_ATT_NAME AS NAME
					FROM "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_EDGES" EDGES, :NEW_EDGES NEWS
					WHERE 
						EDGES.ATT_NAME = NEWS.ATT_NAME
						AND EDGES.PARENT_ATT_NAME <> NEWS.PARENT_ATT_NAME
				)
				UNION
				(
					SELECT DISTINCT EDGES.ATT_NAME AS NAME
					FROM "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_EDGES" EDGES, :NEW_EDGES NEWS
					WHERE
						EDGES.PARENT_ATT_NAME = NEWS.PARENT_ATT_NAME
						AND EDGES.ATT_NAME <> NEWS.ATT_NAME
				)
			)
			AND NODES.HIERARCHY_ID = :HIERARCHY_ID
		;
			
		
		LABEL_PLUS_MAPPINGS_WITH_NULL = 
			SELECT DISTINCT ATT_NAME, PARENT_ATT_NAME
			FROM 
			(
				SELECT DISTINCT ATT_NAME, RESULT_NODE, PARENT_ATT_NAME, COUNT(DISTINCT PRED_NODE) AS OCCURENCE
				FROM (
					SELECT DISTINCT
					A.LEVEL_NAME AS ATT_NAME, 
					SUBSTRING(A.RESULT_NODE, LOCATE(A.RESULT_NODE,'.',-1)+1) AS RESULT_NODE,
					B.LEVEL_NAME AS PARENT_ATT_NAME,
					SUBSTRING(A.PRED_NODE, LOCATE(A.PRED_NODE,'.',-1)+1) AS PRED_NODE
					FROM "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::HIERARCHY_TO_CRAWL" A
					INNER JOIN "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::HIERARCHY_TO_CRAWL" B 
						ON A.PRED_NODE = B.RESULT_NODE
						AND A.HIERARCHY_ID = B.HIERARCHY_ID
					WHERE A.HIERARCHY_ID = :HIERARCHY_ID
					UNION ALL
					SELECT DISTINCT ATT_NAME, RESULT_NODE, PARENT_ATT_NAME, PRED_NODE
					FROM :NEW_MAPPINGS
						
				)
				GROUP BY ATT_NAME, RESULT_NODE, PARENT_ATT_NAME
				HAVING COUNT(DISTINCT PRED_NODE) > 1 
			)
		; 


		--- Insert new edges into table
		INSERT INTO "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_EDGES"
			(HIERARCHY_ID, ATT_NAME, PARENT_ATT_NAME)
			SELECT :HIERARCHY_ID, EDGES.ATT_NAME, EDGES.PARENT_ATT_NAME
			FROM :NEW_EDGES EDGES
			MINUS 
			SELECT DISTINCT HIERARCHY_ID, ATT_NAME, PARENT_ATT_NAME
			FROM "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_EDGES"
			WHERE HIERARCHY_ID = :HIERARCHY_ID
		;
		
		--- Update edges' labels
		UPDATE "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_EDGES" EDGES
			SET EDGES.LABEL = 'f'
			WHERE EDGES.LABEL IS NULL
		;
		

		UPDATE "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_EDGES" EDGES
			SET EDGES.LABEL = '+'
			FROM  "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_EDGES" EDGES, :LABEL_PLUS_MAPPINGS_WITH_NULL F
			WHERE EDGES.ATT_NAME = F.ATT_NAME
				AND EDGES.PARENT_ATT_NAME = F.PARENT_ATT_NAME
				AND EDGES.HIERARCHY_ID = :HIERARCHY_ID
		;
		
		
		LABEL_PLUS_MAPPING_WITHOUT_NULL =
		SELECT DISTINCT ATT_NAME, PARENT_ATT_NAME
			FROM 
			(
				SELECT DISTINCT ATT_NAME, RESULT_NODE, PARENT_ATT_NAME, COUNT(DISTINCT PRED_NODE) AS OCCURENCE
				FROM (
					SELECT DISTINCT
					A.LEVEL_NAME AS ATT_NAME, 
					SUBSTRING(A.RESULT_NODE, LOCATE(A.RESULT_NODE,'.',-1)+1) AS RESULT_NODE,
					B.LEVEL_NAME AS PARENT_ATT_NAME,
					SUBSTRING(A.PRED_NODE, LOCATE(A.PRED_NODE,'.',-1)+1) AS PRED_NODE
					FROM "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::HIERARCHY_TO_CRAWL" A
					INNER JOIN "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::HIERARCHY_TO_CRAWL" B 
						ON A.PRED_NODE = B.RESULT_NODE
						AND A.HIERARCHY_ID = B.HIERARCHY_ID
						AND A.HIERARCHY_ID = :HIERARCHY_ID
					INNER JOIN "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_EDGES" EDGES
						ON A.HIERARCHY_ID = EDGES.HIERARCHY_ID
						AND A.LEVEL_NAME = EDGES.ATT_NAME
						AND B.LEVEL_NAME = EDGES.PARENT_ATT_NAME
						AND EDGES.LABEL = '+'	
					
					UNION ALL
					SELECT DISTINCT ATT_NAME, RESULT_NODE, PARENT_ATT_NAME, PRED_NODE
					FROM :NEW_MAPPINGS				
				)  
				GROUP BY ATT_NAME, RESULT_NODE, PARENT_ATT_NAME
				HAVING COUNT(DISTINCT PRED_NODE) > 1 
				AND RESULT_NODE <> '[]'
			)
		;
		
		LABEL_ONE_MAPPINGS =
			SELECT DISTINCT ATT_NAME, PARENT_ATT_NAME
			FROM :LABEL_PLUS_MAPPINGS_WITH_NULL
			WHERE ATT_NAME IN 
				(SELECT DISTINCT NAME 
					FROM "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_NODES" 
					WHERE IS_OPTION = 1 AND HIERARCHY_ID = :HIERARCHY_ID)
			MINUS
			SELECT DISTINCT ATT_NAME, PARENT_ATT_NAME
			FROM :LABEL_PLUS_MAPPING_WITHOUT_NULL
		;
		--- Update edges' labels
		UPDATE "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_EDGES" EDGES
			SET EDGES.LABEL = '1'
			FROM  "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::ATTRIBUTE_GRAPH_EDGES" EDGES, :LABEL_ONE_MAPPINGS F
			WHERE EDGES.ATT_NAME = F.ATT_NAME
				AND EDGES.PARENT_ATT_NAME = F.PARENT_ATT_NAME
				AND EDGES.HIERARCHY_ID = :HIERARCHY_ID
		;
		
		
	END IF;
	
	DELETE FROM "SCH_COMP"."sap.hana.im.ess.eg.deploy.hier::HIERARCHY_TO_CRAWL"
	WHERE HIERARCHY_ID = :HIERARCHY_ID
	;


END IF;

END;
